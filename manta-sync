#!/usr/bin/env node
/**
 * Rsync style command for Joyent's Manta
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: 10/24/13
 * License: MIT
 */

var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var util = require('util');

var async = require('async');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var manta = require('manta');
var restify = require('restify');
var strsplit = require('strsplit');

var Finder = require('./lib/finder');

var package = require('./package.json');

var LOG = bunyan.createLogger({
  name: path.basename(process.argv[1]),
  level: process.env.LOG_LEVEL || 'info',
  stream: process.stderr,
  serializers: restify.bunyan.serializers
});

// XXX https://github.com/joyent/node-manta/issues/139
var EMPTY_MD5 = 'd41d8cd98f00b204e9800998ecf8427e';

// XXX https://github.com/bahamas10/node-manta-sync/issues/3
function nexttick(cb) {
  return function _nexttick() {
    var self = this;
    var args = arguments;
    process.nextTick(function _cb() {
      cb.apply(self, args);
    });
  };
}

// print usage with an optional error message and exit
function usage(message) {
  manta.cli_usage(OPTIONS_PARSER, message, 'localdir ~~/remotedir\n' + [
    '',
    'synchronize all files found inside `localdir` to `~~/remotedir`',
    '',
    'examples:',
    '  manta-sync ./ ~~/stor/foo',
    '    -- sync all files in your cwd to the dir ~~/stor/foo',
    '  manta-sync --dry-run ./ ~~/stor/foo',
    '    -- same as above, but just HEAD the data, don\'t PUT',
    '',
  ].join('\n'));
}

// parse command line options
var OPTIONS_PARSER = dashdash.createParser({
  options: manta.DEFAULT_CLI_OPTIONS.concat([
    {
      names: ['copies', 'c'],
      type: 'positiveInteger',
      default: 2,
      help: 'number of copies to make',
      helpArg: 'COPIES'
    },
    {
      names: [ 'delete', 'd' ],
      type: 'bool',
      default: false,
      help: 'delete files on the remote end not found locally'
    },
    {
      names: ['header', 'H'],
      type: 'arrayOfString',
      default: [],
      help: 'HTTP headers to include',
      helpArg: 'HEADER'
    },
    {
      names: [ 'just-delete', 'j' ],
      type: 'bool',
      default: false,
      help: 'don\'t send local files, just delete extra remote files'
    },
    {
      names: [ 'md5', 'm' ],
      type: 'bool',
      default: false,
      help: 'use md5 instead of file size (slower, but more accurate)'
    },
    {
      names: [ 'dry-run', 'n' ],
      type: 'bool',
      default: false,
      help: 'don\'t perform any remote PUT or DELETE operations'
    },
    {
      names: [ 'parallel', 'p' ],
      type: 'positiveInteger',
      helpArg: 'CONCURRENCY',
      default: 50,
      help: 'limit concurrent operations'
    },
    {
      names: [ 'updates', 'U' ],
      type: 'bool',
      default: false,
      help: 'check for available updates on npm'
    },
    {
      names: [ 'version', 'V' ],
      type: 'bool',
      default: false,
      help: 'print the version number and exit'
    }
  ])
});


var opts;
try {
  opts = OPTIONS_PARSER.parse(process.argv);
  manta.checkBinEnv(opts);
} catch (e) {
  usage(e.message);
  return;
}

manta.cli_logger(opts, LOG);

if (opts.help) {
  usage();
  return;
} else if (opts.updates) {
  require('latest').checkupdate(package, function(ret, msg) {
    console.log(msg);
    process.exit(ret);
  });
  return;
} else if (opts.version) {
  console.log(package.version);
  return;
}

opts.headers = {};
opts.header.forEach(function(h) {
  if (h.indexOf(':') === -1) {
    usage('header must be in the form of "[header]: value"');
    return;
  }
  var tmp = strsplit(h, ':', 2);
  opts.headers[tmp[0]] = tmp[1].trim();
});
delete opts.header;

var args = opts._args;

if (args.length !== 2) {
  usage('[error] must supply exactly 2 operands\n');
  return;
}

var client = manta.createBinClient(opts);

var localdir = path.resolve(args[0]);
var remotedir = args[1];

var finder = new Finder(localdir);

// 1. Find all local files
if (opts.dry_run)
  console.log('== dryrun ==');
console.log('building local file list...');
var localfiles = [];
finder.on('file', function(file, stat) {
  if (file.indexOf(localdir) !== 0)
    return console.error('error processing %s', file);

  /**
   * $ manta-sync ./foo ~~/stor/foo
   * d.file = /home/dave/foo/file.txt (absolute path)
   * d.stat = [Stat object]
   * d.basefile = file.txt
   * d.mantafile = ~~/store/foo/file.txt
   */
  var d = {
    file: file,
    stat: stat,
    basefile: file.substr(localdir.length)
  };
  d.mantafile = path.join(remotedir, d.basefile);
  localfiles.push(d);
});

finder.on('end', function() {
  console.log('local file list built, %d files found\n', localfiles.length);
  if (!localfiles.length)
    return done();
  else if (opts.just_delete)
    return dodelete();
  infoqueue.push(localfiles, function() {});
  headstarted = Date.now();
});

// 2. Process each local file, figure out if we need to put
// a new version into Manta
var processed = 0;
var filestoput = [];
var errors = [];
var headstarted;
var infoqueue = async.queue(processfile, opts.parallel);
function processfile(d, cb) {
  cb = nexttick(cb);
  client.info(d.mantafile, function(err, info) {
    if (err) {
      processed++;
      if (err.code === 'NotFoundError') {
        console.log('%s... not found, adding to put list (%d/%d)',
            d.mantafile, processed, localfiles.length);
        filestoput.push(d);
      } else {
        var s = util.format('%s... unknown error: %s (%d/%d)',
            d.mantafile, err.code || err.message, processed, localfiles.length);
        console.error(s);
        errors.push(s);
      }
      cb();
      return;
    }

    if (opts.md5) {
      // md5
      var md5sum = crypto.createHash('md5');
      var rs = fs.createReadStream(d.file);
      rs.on('error', function(err) {
        processed++;
        var s = util.format('%s... read error: %s (%d/%d)',
            d.mantafile, err.message, processed, localfiles.length);
        console.error(s);
        errors.push(s);
      });

      rs.on('data', md5sum.update.bind(md5sum));
      rs.on('end', function() {
        processed++;
        var md5 = md5sum.digest('hex');

        var remotemd5 = info.md5;
        if (!remotemd5) {
          remotemd5 = EMPTY_MD5;
        } else {
          remotemd5 = new Buffer(remotemd5, 'base64').toString('hex');
        }

        if (md5 === remotemd5) {
          console.log('%s... md5 same as local file, skipping (%d/%d)',
            d.mantafile, processed, localfiles.length);
        } else {
          console.log('%s... md5 is different, adding to put list (%d/%d)',
            d.mantafile, processed, localfiles.length);
          filestoput.push(d);
        }

        cb();
      });
      return;
    } else {
      processed++;
      // XXX +info.size is a hack
      // https//github.com/joyent/node-manta/issues/136
      if (d.stat.size === +info.size) {
        console.log('%s... size same as local file, skipping (%d/%d)',
            d.mantafile, processed, localfiles.length);
      } else {
        console.log('%s... size is different, adding to put list (%d/%d)',
            d.mantafile, processed, localfiles.length);
        filestoput.push(d);
      }
      cb();
      return;
    }
  });
}

infoqueue.drain = function() {
  processed = 0;
  console.log('\nupload list built, %d files staged for uploading (took %dms)\n',
      filestoput.length, (Date.now() - headstarted) || 0);
  if (!filestoput.length) {
    if (opts.delete)
      dodelete();
    else
      done();
    return;
  }
  putqueue.push(filestoput, function() {});
  putsstarted = Date.now();
};

// 3. Upload each file that needs to be uploaded, lazily handling
// directory creation
var putqueue = async.queue(putfile, opts.parallel);
var putsstarted;
var filesput = 0;
var filesnotput = 0;
var bytesput = 0;
function putfile(d, cb) {
  cb = nexttick(cb);
  if (opts.dry_run) {
    console.log('%s... uploaded (dryrun)', d.mantafile);
    return cb();
  }
  var rs = fs.createReadStream(d.file);
  rs.on('error', function(err) {
    processed++;
    var s = util.format('%s... error opening file: %s (%d/%d)',
      d.mantafile, err.message, processed, filestoput.length);
    console.error(s);
    errors.push(s);
    filesnotput++;
    cb();
  });

  rs.on('open', function() {
    var _opts = {
      size: d.stat.size,
      mkdirs: true,
      copies: opts.copies,
      headers: opts.headers
    };
    client.put(d.mantafile, rs, _opts, function(err) {
      processed++;
      if (err) {
        var s = util.format('%s... error uploading: %s (%d/%d)',
          d.mantafile, err.code || err.message, processed, filestoput.length);
        console.error(s);
        errors.push(s);
        filesnotput++;
      } else {
        console.log('%s... uploaded (%d/%d)',
          d.mantafile, processed, filestoput.length);
        filesput++;
        bytesput += d.stat.size;
      }
      cb();
    });
  });
}

putqueue.drain = function() {
  processed = 0;
  console.log('\n%d files (%d bytes) put successfully, %d files failed to put (took %dms)',
      filesput, bytesput, filesnotput, (Date.now() - putsstarted) || 0);
  if (opts.delete)
    dodelete();
  else
    done();
};

// 4. Find all remote files, and delete those that are referenced locally
var deletequeue = async.queue(deletefile, opts.parallel);
var filesdeleted = 0;
var filesnotdeleted = 0;
var remotefilestodelete = [];
var deletesstarted;
function dodelete() {
  console.log('\nbuilding remote file list for deletion...');
  client.ftw(remotedir, {parallel: opts.parallel}, function(err, res) {
    if (err) {
      var e = util.format('error listing remote files: %s', err.code || err.message);
      console.error('%s\n', e);
      errors.push(e);
      done();
      return;
    }
    res.on('entry', function(d) {
      if (d.type !== 'object')
        return;
      d.mantafile = path.join(d.parent, d.name).replace('/' + process.env.MANTA_USER, '~~');

      var results = localfiles.filter(function(localfile) {
        return localfile.mantafile === d.mantafile;
      });

      if (!results.length)
        remotefilestodelete.push(d);
    });
    res.on('end', function() {
      console.log('remote file list built, %d files found\n', remotefilestodelete.length);
      if (!remotefilestodelete.length)
        return done();
      deletequeue.push(remotefilestodelete, function() {});
      deletesstarted = Date.now();
    });
  });
}

function deletefile(d, cb) {
  cb = nexttick(cb);
  if (opts.dry_run) {
    console.log('%s... deleted (dryrun)', d.mantafile);
    return cb();
  }
  client.unlink(d.mantafile, function(err) {
    processed++;
    if (err) {
      var s = util.format('%s... error deleting: %s (%d/%d)',
        d.mantafile, err.code, processed, remotefilestodelete.length);
      console.error(s);
      errors.push(s);
      filesnotdeleted++;
    } else {
      console.log('%s... deleted (%d/%d)',
        d.mantafile, processed, remotefilestodelete.length);
      filesdeleted++;
    }
    cb();
  });
}

deletequeue.drain = function() {
  console.log('\n%d files deleted successfully, %d files failed to delete (took %dms)',
      filesdeleted, filesnotdeleted, (Date.now() - deletesstarted) || 0);
  done();
};

// 5. Done
function done() {
  var ret = 0;
  if (errors.length) {
    ret = 1;
    console.error('\n== errors\n');
    errors.forEach(function(error) {
      console.error(error);
    });
  }
  console.log('\ndone');
  client.close();
  process.exit(ret);
}

// Signals
process.on('SIGUSR1', function() {
  if (infoqueue.length) {
    console.log('%d info tasks waiting to complete', infoqueue.tasks.length);
    infoqueue.tasks.forEach(function(task) {
      console.log(task.data.mantafile);
    });
  }
  if (putqueue.length) {
    console.log('%d put tasks waiting to complete', putqueue.tasks.length);
    putqueue.tasks.forEach(function(task) {
      console.log(task.data.mantafile);
    });
  }
  if (deletequeue.length) {
    console.log('%d delete tasks waiting to complete', deletequeue.tasks.length);
    deletequeue.tasks.forEach(function(task) {
      console.log(task.data.mantafile);
    });
  }
});
